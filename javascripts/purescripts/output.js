// Generated by psc-bundle 0.8.0.0
var PS = { };
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Prelude"];
  var Show = function (show) {
      this.show = show;
  }; 
  var showNumber = new Show($foreign.showNumberImpl);
  var show = function (dict) {
      return dict.show;
  };
  var otherwise = true;
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["showNumber"] = showNumber;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["log"] = $foreign.log;;
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (b) {
      return function (f) {
          return function (v) {
              if (v instanceof Nothing) {
                  return b;
              };
              if (v instanceof Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ b.constructor.name, f.constructor.name, v.constructor.name ]);
          };
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var uncons = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });                          
  var tail = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var head = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (v) {
          return new Data_Maybe.Just(x);
      };
  });
  exports["uncons"] = uncons;
  exports["tail"] = tail;
  exports["head"] = head;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";          

  exports.sqrt = Math.sqrt;  
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Math"];
  exports["sqrt"] = $foreign.sqrt;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var $$Math = PS["Math"];     
  var Point = (function () {
      function Point(value0) {
          this.value0 = value0;
      };
      Point.create = function (value0) {
          return new Point(value0);
      };
      return Point;
  })();
  var NoPoint = (function () {
      function NoPoint() {

      };
      NoPoint.value = new NoPoint();
      return NoPoint;
  })();
  var toPoint = function (obj) {
      return new Point(obj);
  };
  var showPoint = function (v) {
      if (v instanceof NoPoint) {
          return "No point!";
      };
      if (v instanceof Point) {
          return "(" + (Prelude.show(Prelude.showNumber)(v.value0.x) + (", " + (Prelude.show(Prelude.showNumber)(v.value0.y) + ")")));
      };
      throw new Error("Failed pattern match at Main line 13, column 1 - line 14, column 1: " + [ v.constructor.name ]);
  };
  var pointDiff = function (v) {
      return function (v1) {
          if (v1 instanceof NoPoint) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof NoPoint) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof Point && v1 instanceof Point) {
              return new Data_Maybe.Just($$Math.sqrt((v.value0.x - v1.value0.x) * (v.value0.x - v1.value0.x) + (v.value0.y - v1.value0.y) * (v.value0.y - v1.value0.y)));
          };
          throw new Error("Failed pattern match at Main line 34, column 1 - line 35, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var main = Control_Monad_Eff_Console.log("Purescript Loaded.");
  var lessThan = function (p1) {
      return function (p2) {
          return function (given) {
              return Data_Maybe.maybe(true)(Data_Maybe.maybe(function (diff2) {
                  return false;
              })(function (diff1) {
                  return function (diff2) {
                      return diff1 < diff2;
                  };
              })(pointDiff(given)(p1)))(pointDiff(given)(p2));
          };
      };
  };
  var findNearestPoint = function (given) {
      return function (pts) {
          var findNearestPoint$primeʹ = function (p1) {
              return function (p2) {
                  return function (given1) {
                      if (lessThan(p1)(p2)(given1)) {
                          return p1;
                      };
                      if (Prelude.otherwise) {
                          return p2;
                      };
                      throw new Error("Failed pattern match at Main line 27, column 9 - line 28, column 9: " + [ p1.constructor.name, p2.constructor.name, given1.constructor.name ]);
                  };
              };
          };
          var findNearestPointʹ = function (given1) {
              return function (nearest) {
                  return function (v) {
                      if (v.length === 0) {
                          return nearest;
                      };
                      return Data_Maybe.maybe(nearest)(function (v1) {
                          return findNearestPointʹ(given1)(findNearestPoint$primeʹ(toPoint(v1.head))(nearest)(given1))(v1.tail);
                      })(Data_Array.uncons(v));
                  };
              };
          };
          return findNearestPointʹ(toPoint(given))(NoPoint.value)(pts);
      };
  };
  exports["Point"] = Point;
  exports["NoPoint"] = NoPoint;
  exports["main"] = main;
  exports["pointDiff"] = pointDiff;
  exports["lessThan"] = lessThan;
  exports["findNearestPoint"] = findNearestPoint;
  exports["toPoint"] = toPoint;
  exports["showPoint"] = showPoint;;
 
})(PS["Main"] = PS["Main"] || {});

PS["Main"].main();
